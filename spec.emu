<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Destructuring Private Fields
status: proposal
stage: 2
contributors: Justin Ridgewell
location: https://justin.ridgewell.name/proposal-destructuring-private/
</pre>

<style>
#sec-placeholder, [href="#sec-placeholder"] {
  display: none;
}
</style>
<script>
  Array.from(document.querySelectorAll('ol.toc li'), function (node) {
    if (node.querySelector(':scope > [href="#sec-placeholder"]')) {
      node.style.display = 'none';
    }
  });
</script>

<emu-clause id="sec-scope">
  <h1>Scope</h1>
  <p>
    This is the spec text of the <a href="https://github.com/jridgewell/proposal-destructuring-private/">Destructuring Private Fields proposal</a> in ECMAScript.
  </p>
</emu-clause>

<emu-clause id="sec-placeholder"><h1>2</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>3</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>4</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>5</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>6</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>7</h1></emu-clause>

<emu-clause id="sec-syntax-directed-operations">
  <h1>Syntax-Directed Operations</h1>
  <emu-clause id="sec-placeholder"><h1>1</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>2</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>3</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>4</h1></emu-clause>

  <emu-clause id="sec-syntax-directed-operations-miscellaneous">
    <h1>Miscellaneous</h1>
    <emu-clause id="sec-placeholder"><h1>RS: InstantiateFunctionObject</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>RS: BindingInitialization</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>RS: IteratorBindingInitialization</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>SS: AssignmentTargetType</h1></emu-clause>

    <emu-clause id="sec-static-semantics-propname" oldids="sec-object-initializer-static-semantics-propname,sec-method-definitions-static-semantics-propname,sec-generator-function-definitions-static-semantics-propname,sec-async-generator-function-definitions-static-semantics-propname,sec-class-definitions-static-semantics-propname,sec-async-function-definitions-static-semantics-PropName" type="sdo">
      <h1>Static Semantics: PropName</h1>
      <emu-grammar>PropertyDefinition : IdentifierReference</emu-grammar>
      <emu-alg>
        1. Return StringValue of |IdentifierReference|.
      </emu-alg>
      <emu-grammar>PropertyDefinition : `...` AssignmentExpression</emu-grammar>
      <emu-alg>
        1. Return ~empty~.
      </emu-alg>
      <emu-grammar>PropertyDefinition : PropertyName `:` AssignmentExpression</emu-grammar>
      <emu-alg>
        1. Return PropName of |PropertyName|.
      </emu-alg>
      <ins class="block">
      <emu-grammar>PropertyDefinition : PrivateIdentifier `:` AssignmentExpression</emu-grammar>
      <emu-alg>
        1. Return ~empty~.
      </emu-alg>
      </ins>
      <emu-grammar>LiteralPropertyName : IdentifierName</emu-grammar>
      <emu-alg>
        1. Return StringValue of |IdentifierName|.
      </emu-alg>
      <emu-grammar>LiteralPropertyName : StringLiteral</emu-grammar>
      <emu-alg>
        1. Return the SV of |StringLiteral|.
      </emu-alg>
      <emu-grammar>LiteralPropertyName : NumericLiteral</emu-grammar>
      <emu-alg>
        1. Let _nbr_ be the NumericValue of |NumericLiteral|.
        1. Return ! ToString(_nbr_).
      </emu-alg>
      <emu-grammar>ComputedPropertyName : `[` AssignmentExpression `]`</emu-grammar>
      <emu-alg>
        1. Return ~empty~.
      </emu-alg>
      <emu-grammar>
        MethodDefinition :
          ClassElementName `(` UniqueFormalParameters `)` `{` FunctionBody `}`
          `get` ClassElementName `(` `)` `{` FunctionBody `}`
          `set` ClassElementName `(` PropertySetParameterList `)` `{` FunctionBody `}`
      </emu-grammar>
      <emu-alg>
        1. Return PropName of |ClassElementName|.
      </emu-alg>
      <emu-grammar>GeneratorMethod : `*` ClassElementName `(` UniqueFormalParameters `)` `{` GeneratorBody `}`</emu-grammar>
      <emu-alg>
        1. Return PropName of |ClassElementName|.
      </emu-alg>
      <emu-grammar>AsyncGeneratorMethod : `async` `*` ClassElementName `(` UniqueFormalParameters `)` `{` AsyncGeneratorBody `}`</emu-grammar>
      <emu-alg>
        1. Return PropName of |ClassElementName|.
      </emu-alg>
      <emu-grammar>ClassElement : ClassStaticBlock</emu-grammar>
      <emu-alg>
        1. Return ~empty~.
      </emu-alg>
      <emu-grammar>ClassElement : `;`</emu-grammar>
      <emu-alg>
        1. Return ~empty~.
      </emu-alg>
      <emu-grammar>
        AsyncMethod : `async` ClassElementName `(` UniqueFormalParameters `)` `{` AsyncFunctionBody `}`
      </emu-grammar>
      <emu-alg>
        1. Return PropName of |ClassElementName|.
      </emu-alg>
      <emu-grammar>
        FieldDefinition : ClassElementName Initializer?
      </emu-grammar>
      <emu-alg>
        1. Return PropName of |ClassElementName|.
      </emu-alg>
      <emu-grammar>
        ClassElementName : PrivateIdentifier
      </emu-grammar>
      <emu-alg>
        1. Return ~empty~.
      </emu-alg>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-placeholder"><h1>9</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>10</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>11</h1></emu-clause>
<emu-clause id="sec-placeholder"><h1>12</h1></emu-clause>

<emu-clause id="sec-ecmascript-language-expressions">
  <h1>ECMAScript Language: Expressions</h1>
  <emu-clause id="sec-placeholder"><h1>1</h1></emu-clause>

  <emu-clause id="sec-primary-expression">
    <h1>Primary Expression</h1>
    <emu-clause id="sec-placeholder"><h1>The `this` Keyword</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>Identifier Reference</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>Literals</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>Array Initializer</h1></emu-clause>

    <emu-clause id="sec-object-initializer">
      <h1>Object Initializer</h1>
      <emu-note>
        <p>An object initializer is an expression describing the initialization of an Object, written in a form resembling a literal. It is a list of zero or more pairs of property keys and associated values, enclosed in curly brackets. The values need not be literals; they are evaluated each time the object initializer is evaluated.</p>
      </emu-note>
      <h2>Syntax</h2>
      <emu-grammar type="definition">
        ObjectLiteral[Yield, Await] :
          `{` `}`
          `{` PropertyDefinitionList[?Yield, ?Await] `}`
          `{` PropertyDefinitionList[?Yield, ?Await] `,` `}`

        PropertyDefinitionList[Yield, Await] :
          PropertyDefinition[?Yield, ?Await]
          PropertyDefinitionList[?Yield, ?Await] `,` PropertyDefinition[?Yield, ?Await]

        PropertyDefinition[Yield, Await] :
          IdentifierReference[?Yield, ?Await]
          CoverInitializedName[?Yield, ?Await]
          PropertyName[?Yield, ?Await] `:` AssignmentExpression[+In, ?Yield, ?Await]
          <ins>PrivateIdentifier[?Yield, ?Await] `:` AssignmentExpression[+In, ?Yield, ?Await]</ins>
          MethodDefinition[?Yield, ?Await]
          `...` AssignmentExpression[+In, ?Yield, ?Await]

        PropertyName[Yield, Await] :
          LiteralPropertyName
          ComputedPropertyName[?Yield, ?Await]

        LiteralPropertyName :
          IdentifierName
          StringLiteral
          NumericLiteral

        ComputedPropertyName[Yield, Await] :
          `[` AssignmentExpression[+In, ?Yield, ?Await] `]`

        CoverInitializedName[Yield, Await] :
          IdentifierReference[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]

        Initializer[In, Yield, Await] :
          `=` AssignmentExpression[?In, ?Yield, ?Await]
      </emu-grammar>
      <emu-note>
        <p>|MethodDefinition| is defined in <emu-xref href="#sec-method-definitions"></emu-xref>.</p>
      </emu-note>
      <emu-note>
        <p>In certain contexts, |ObjectLiteral| is used as a cover grammar for a more restricted secondary grammar. The |CoverInitializedName| production is necessary to fully cover these secondary grammars. However, use of this production results in an early Syntax Error in normal contexts where an actual |ObjectLiteral| is expected.</p>
      </emu-note>

      <emu-clause id="sec-object-initializer-static-semantics-early-errors" oldids="sec-__proto__-property-names-in-object-initializers">
        <h1>Static Semantics: Early Errors</h1>
        <emu-grammar>PropertyDefinition : MethodDefinition</emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if HasDirectSuper of |MethodDefinition| is *true*.
          </li>
          <li>
            It is a Syntax Error if PrivateBoundIdentifiers of |MethodDefinition| is not empty.
          </li>
        </ul>
        <p>In addition to describing an actual object initializer the |ObjectLiteral| productions are also used as a cover grammar for |ObjectAssignmentPattern| and may be recognized as part of a |CoverParenthesizedExpressionAndArrowParameterList|. When |ObjectLiteral| appears in a context where |ObjectAssignmentPattern| is required the following Early Error rules are <b>not</b> applied. In addition, they are not applied when initially parsing a |CoverParenthesizedExpressionAndArrowParameterList| or |CoverCallExpressionAndAsyncArrowHead|.</p>
        <emu-grammar>PropertyDefinition : CoverInitializedName</emu-grammar>
        <ul>
          <li>
            Always throw a Syntax Error if code matches this production.
          </li>
        </ul>
        <ins class="block">
        <emu-grammar>PropertyDefinition : PrivateIdentifier `:` AssignmentExpression</emu-grammar>
        <ul>
          <li>
            Always throw a Syntax Error if code matches this production.
          </li>
        </ul>
        </ins>
        <emu-note>
          <p><del>This production</del><ins>These productions</ins> exists so that |ObjectLiteral| can serve as a cover grammar for |ObjectAssignmentPattern|. <del>It</del><ins>They</ins> cannot occur in an actual object initializer.</p>
        </emu-note>
        <emu-grammar>
          ObjectLiteral : `{` PropertyDefinitionList `}`

          ObjectLiteral : `{` PropertyDefinitionList `,` `}`
        </emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if PropertyNameList of |PropertyDefinitionList| contains any duplicate entries for *"__proto__"* and at least two of those entries were obtained from productions of the form <emu-grammar>PropertyDefinition : PropertyName `:` AssignmentExpression</emu-grammar>. This rule is not applied if this |ObjectLiteral| is contained within a |Script| that is being parsed for JSON.parse (see step <emu-xref href="#step-json-parse-parse"></emu-xref> of <emu-xref href="#sec-json.parse">JSON.parse</emu-xref>).
          </li>
        </ul>
        <emu-note>
          <p>The List returned by PropertyNameList does not include property names defined using a |ComputedPropertyName|.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-placeholder"><h1>3</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>4</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>5</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>6</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>7</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>8</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>9</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>10</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>11</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>12</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>13</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>14</h1></emu-clause>

  <emu-clause id="sec-assignment-operators">
    <h1>Assignment Operators</h1>
    <emu-clause id="sec-placeholder"><h1>Static Semantics: Early Errors</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>Runtime Semantics: Evaluation</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>ApplyStringOrNumericBinaryOperator</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>EvaluateStringOrNumericBinaryExpression</h1></emu-clause>

    <emu-clause id="sec-destructuring-assignment">
      <h1>Destructuring Assignment</h1>

      <h2>Supplemental Syntax</h2>
      <p>In certain circumstances when processing an instance of the production
        <br>
        <emu-grammar>AssignmentExpression : LeftHandSideExpression `=` AssignmentExpression</emu-grammar>
        <br>
        the interpretation of |LeftHandSideExpression| is refined using the following grammar:</p>
      <emu-grammar type="definition">
        AssignmentPattern[Yield, Await] :
          ObjectAssignmentPattern[?Yield, ?Await]
          ArrayAssignmentPattern[?Yield, ?Await]

        ObjectAssignmentPattern[Yield, Await] :
          `{` `}`
          `{` AssignmentRestProperty[?Yield, ?Await] `}`
          `{` AssignmentPropertyList[?Yield, ?Await] `}`
          `{` AssignmentPropertyList[?Yield, ?Await] `,` AssignmentRestProperty[?Yield, ?Await]? `}`

        ArrayAssignmentPattern[Yield, Await] :
          `[` Elision? AssignmentRestElement[?Yield, ?Await]? `]`
          `[` AssignmentElementList[?Yield, ?Await] `]`
          `[` AssignmentElementList[?Yield, ?Await] `,` Elision? AssignmentRestElement[?Yield, ?Await]? `]`

        AssignmentRestProperty[Yield, Await] :
          `...` DestructuringAssignmentTarget[?Yield, ?Await]

        AssignmentPropertyList[Yield, Await] :
          AssignmentProperty[?Yield, ?Await]
          AssignmentPropertyList[?Yield, ?Await] `,` AssignmentProperty[?Yield, ?Await]

        AssignmentElementList[Yield, Await] :
          AssignmentElisionElement[?Yield, ?Await]
          AssignmentElementList[?Yield, ?Await] `,` AssignmentElisionElement[?Yield, ?Await]

        AssignmentElisionElement[Yield, Await] :
          Elision? AssignmentElement[?Yield, ?Await]

        AssignmentProperty[Yield, Await] :
          IdentifierReference[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?
          PropertyName[?Yield, ?Await] `:` AssignmentElement[?Yield, ?Await]
          <ins>PrivateIdentifier `:` AssignmentElement[?Yield, ?Await]</ins>

        AssignmentElement[Yield, Await] :
          DestructuringAssignmentTarget[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?

        AssignmentRestElement[Yield, Await] :
          `...` DestructuringAssignmentTarget[?Yield, ?Await]

        DestructuringAssignmentTarget[Yield, Await] :
          LeftHandSideExpression[?Yield, ?Await]
      </emu-grammar>

      <emu-clause id="sec-placeholder"><h1>Static Semantics: Early Errors</h1></emu-clause>

      <emu-clause id="sec-runtime-semantics-propertydestructuringassignmentevaluation" type="sdo" aoid="PropertyDestructuringAssignmentEvaluation">
        <h1>Runtime Semantics: PropertyDestructuringAssignmentEvaluation</h1>
        <p>With parameter _value_.</p>

        <emu-note>The following operations collect a list of all destructured property names.</emu-note>

        <emu-grammar>AssignmentPropertyList : AssignmentPropertyList `,` AssignmentProperty</emu-grammar>
        <emu-alg>
          1. Let _propertyNames_ be ? PropertyDestructuringAssignmentEvaluation of |AssignmentPropertyList| with argument _value_.
          1. Let _nextNames_ be ? PropertyDestructuringAssignmentEvaluation of |AssignmentProperty| with argument _value_.
          1. Return the list-concatenation of _propertyNames_ and _nextNames_.
        </emu-alg>

        <emu-grammar>AssignmentProperty : IdentifierReference Initializer?</emu-grammar>
        <emu-alg>
          1. Let _P_ be StringValue of |IdentifierReference|.
          1. Let _lref_ be ? ResolveBinding(_P_).
          1. Let _v_ be ? GetV(_value_, _P_).
          1. If |Initializer_opt| is present and _v_ is *undefined*, then
            1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then
              1. Set _v_ to the result of performing NamedEvaluation for |Initializer| with argument _P_.
            1. Else,
              1. Let _defaultValue_ be the result of evaluating |Initializer|.
              1. Set _v_ to ? GetValue(_defaultValue_).
          1. Perform ? PutValue(_lref_, _v_).
          1. Return a List whose sole element is _P_.
        </emu-alg>

        <emu-grammar>AssignmentProperty : PropertyName `:` AssignmentElement</emu-grammar>
        <emu-alg>
          1. Let _name_ be the result of evaluating |PropertyName|.
          1. ReturnIfAbrupt(_name_).
          1. Perform ? KeyedDestructuringAssignmentEvaluation of |AssignmentElement| with _value_ and _name_ as the arguments.
          1. Return a List whose sole element is _name_.
        </emu-alg>

        <ins class="block">
        <emu-grammar>AssignmentProperty : PrivateIdentifier `:` AssignmentElement</emu-grammar>
        <emu-alg>
          1. Let _privateIdentifier_ be the StringValue of |PrivateIdentifier|.
          1. Let _privateEnv_ be the running execution context's PrivateEnvironment.
          1. Let _privateName_ be ! ResolvePrivateIdentifier(_privateEnv_, _privateIdentifier_).
          1. Perform ? KeyedDestructuringAssignmentEvaluation of |AssignmentElement| with _value_ and _privateName_ as the arguments.
          1. Return a new empty List.
        </emu-alg>
        <emu-note>PropertyDestructuringAssignmentEvaluation returns a list of property names which are kept so they can be excluded from a AssignmentRestProperty. Because AssignmentRestProperty already does not copy private fields to the new object, we do not need to add our _privateName_ to the list.</emu-note>
        </ins>
      </emu-clause>

      <emu-clause id="sec-placeholder"><h1>Runtime Semantics: PropertyDestructuringAssignmentEvaluation</h1></emu-clause>
      <emu-clause id="sec-placeholder"><h1>Runtime Semantics: RestDestructuringAssignmentEvaluation</h1></emu-clause>
      <emu-clause id="sec-placeholder"><h1>Runtime Semantics: IteratorDestructuringAssignmentEvaluation</h1></emu-clause>

      <emu-clause id="sec-runtime-semantics-keyeddestructuringassignmentevaluation" type="sdo" aoid="KeyedDestructuringAssignmentEvaluation">
        <h1>Runtime Semantics: KeyedDestructuringAssignmentEvaluation</h1>
        <p>With parameters _value_ and _propertyName_.</p>
        <emu-grammar>AssignmentElement : DestructuringAssignmentTarget Initializer?</emu-grammar>
        <emu-alg>
          1. If |DestructuringAssignmentTarget| is neither an |ObjectLiteral| nor an |ArrayLiteral|, then
            1. Let _lref_ be the result of evaluating |DestructuringAssignmentTarget|.
            1. ReturnIfAbrupt(_lref_).
          1. <del>Let _v_ to ? GetV(_value_, _propertyName_).</del>
          1. <ins>Let _v_ be ~empty~.</ins>
          1. <ins>If _propertyName_ is a Private Name, then</ins>
            1. <ins>Set _v_ to ? PrivateGet(_propertyName_, _value_).</ins>
          1. <ins>Else,</ins>
            1. <ins>Set _v_ to ? GetV(_value_, _propertyName_).</ins>
          1. If |Initializer| is present and _v_ is *undefined*, then
            1. If IsAnonymousFunctionDefinition(|Initializer|) and IsIdentifierRef of |DestructuringAssignmentTarget| are both *true*, then
              1. Let _rhsValue_ be ? NamedEvaluation of |Initializer| with argument _lref_.[[ReferencedName]].
            1. Else,
              1. Let _defaultValue_ be the result of evaluating |Initializer|.
              1. Let _rhsValue_ be ? GetValue(_defaultValue_).
          1. Else, let _rhsValue_ be _v_.
          1. If |DestructuringAssignmentTarget| is an |ObjectLiteral| or an |ArrayLiteral|, then
            1. Let _assignmentPattern_ be the |AssignmentPattern| that is covered by |DestructuringAssignmentTarget|.
            1. Return the result of performing DestructuringAssignmentEvaluation of _assignmentPattern_ with _rhsValue_ as the argument.
          1. Return ? PutValue(_lref_, _rhsValue_).
        </emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-ecmascript-language-statements-and-declarations">
  <h1>ECMAScript Language: Statements and Declarations</h1>
  <emu-clause id="sec-placeholder"><h1>1</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>2</h1></emu-clause>

  <emu-clause id="sec-declarations-and-the-variable-statement">
    <h1>Declarations and the Variable Statement</h1>
    <emu-clause id="sec-placeholder"><h1>Let and Const Declarations</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>Variable Statement</h1></emu-clause>

    <emu-clause id="sec-destructuring-binding-patterns">
      <h1>Destructuring Binding Patterns</h1>
      <h2>Syntax</h2>
      <emu-grammar type="definition">
        BindingPattern[Yield, Await] :
          ObjectBindingPattern[?Yield, ?Await]
          ArrayBindingPattern[?Yield, ?Await]

        ObjectBindingPattern[Yield, Await] :
          `{` `}`
          `{` BindingRestProperty[?Yield, ?Await] `}`
          `{` BindingPropertyList[?Yield, ?Await] `}`
          `{` BindingPropertyList[?Yield, ?Await] `,` BindingRestProperty[?Yield, ?Await]? `}`

        ArrayBindingPattern[Yield, Await] :
          `[` Elision? BindingRestElement[?Yield, ?Await]? `]`
          `[` BindingElementList[?Yield, ?Await] `]`
          `[` BindingElementList[?Yield, ?Await] `,` Elision? BindingRestElement[?Yield, ?Await]? `]`

        BindingRestProperty[Yield, Await] :
          `...` BindingIdentifier[?Yield, ?Await]

        BindingPropertyList[Yield, Await] :
          BindingProperty[?Yield, ?Await]
          BindingPropertyList[?Yield, ?Await] `,` BindingProperty[?Yield, ?Await]

        BindingElementList[Yield, Await] :
          BindingElisionElement[?Yield, ?Await]
          BindingElementList[?Yield, ?Await] `,` BindingElisionElement[?Yield, ?Await]

        BindingElisionElement[Yield, Await] :
          Elision? BindingElement[?Yield, ?Await]

        BindingProperty[Yield, Await] :
          SingleNameBinding[?Yield, ?Await]
          PropertyName[?Yield, ?Await] `:` BindingElement[?Yield, ?Await]
          <ins>PrivateIdentifier `:` BindingElement[?Yield, ?Await]</ins>

        BindingElement[Yield, Await] :
          SingleNameBinding[?Yield, ?Await]
          BindingPattern[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?

        SingleNameBinding[Yield, Await] :
          BindingIdentifier[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?

        BindingRestElement[Yield, Await] :
          `...` BindingIdentifier[?Yield, ?Await]
          `...` BindingPattern[?Yield, ?Await]
      </emu-grammar>

      <emu-clause id="sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization" type="sdo">
        <h1>
          Runtime Semantics: PropertyBindingInitialization (
            _value_: unknown,
            _environment_: unknown,
          )
        </h1>
        <dl class="header">
          <dt>description</dt>
          <dd>It collects a list of all bound property names rather than just empty completion.</dd>
        </dl>
        <emu-grammar>BindingPropertyList : BindingPropertyList `,` BindingProperty</emu-grammar>
        <emu-alg>
          1. Let _boundNames_ be ? PropertyBindingInitialization of |BindingPropertyList| with arguments _value_ and _environment_.
          1. Let _nextNames_ be ? PropertyBindingInitialization of |BindingProperty| with arguments _value_ and _environment_.
          1. Return the list-concatenation of _boundNames_ and _nextNames_.
        </emu-alg>

        <emu-grammar>BindingProperty : SingleNameBinding</emu-grammar>
        <emu-alg>
          1. Let _name_ be the string that is the only element of BoundNames of |SingleNameBinding|.
          1. Perform ? KeyedBindingInitialization for |SingleNameBinding| using _value_, _environment_, and _name_ as the arguments.
          1. Return a List whose sole element is _name_.
        </emu-alg>

        <emu-grammar>BindingProperty : PropertyName `:` BindingElement</emu-grammar>
        <emu-alg>
          1. Let _P_ be the result of evaluating |PropertyName|.
          1. ReturnIfAbrupt(_P_).
          1. Perform ? KeyedBindingInitialization of |BindingElement| with _value_, _environment_, and _P_ as the arguments.
          1. Return a List whose sole element is _P_.
        </emu-alg>

        <ins class="block">
        <emu-grammar>BindingProperty : PrivateIdentifier `:` BindingElement</emu-grammar>
        <emu-alg>
          1. Let _privateIdentifier_ be the StringValue of |PrivateIdentifier|.
          1. Let _privateEnv_ be the running execution context's PrivateEnvironment.
          1. Let _privateName_ be ! ResolvePrivateIdentifier(_privateEnv_, _privateIdentifier_).
          1. Perform ? KeyedBindingInitialization of |BindingElement| with _value_, _environment_, and _privateName_ as the arguments.
          1. Return a new empty List.
        </emu-alg>
        </ins>
      </emu-clause>

      <emu-clause id="sec-placeholder"><h1>Runtime Semantics: RestBindingInitialization</h1></emu-clause>

      <emu-clause id="sec-runtime-semantics-keyedbindinginitialization" type="sdo">
        <h1>
          Runtime Semantics: KeyedBindingInitialization (
            _value_: unknown,
            _environment_: unknown,
            _propertyName_: unknown,
          )
        </h1>

        <emu-note>
          <p>When *undefined* is passed for _environment_ it indicates that a PutValue operation should be used to assign the initialization value. This is the case for formal parameter lists of non-strict functions. In that case the formal parameter bindings are preinitialized in order to deal with the possibility of multiple parameters with the same name.</p>
        </emu-note>
        <emu-grammar>BindingElement : BindingPattern Initializer?</emu-grammar>
        <emu-alg>
          1. <del>Let _v_ to ? GetV(_value_, _propertyName_).</del>
          1. <ins>Let _v_ be ~empty~.</ins>
          1. <ins>If _propertyName_ is a Private Name, then</ins>
            1. <ins>Set _v_ to ? PrivateGet(_propertyName_, _value_).</ins>
          1. <ins>Else,</ins>
            1. <ins>Set _v_ to ? GetV(_value_, _propertyName_).</ins>
          1. If |Initializer| is present and _v_ is *undefined*, then
            1. Let _defaultValue_ be the result of evaluating |Initializer|.
            1. Set _v_ to ? GetValue(_defaultValue_).
          1. Return the result of performing BindingInitialization for |BindingPattern| passing _v_ and _environment_ as arguments.
        </emu-alg>
        <emu-grammar>SingleNameBinding : BindingIdentifier Initializer?</emu-grammar>
        <emu-alg>
          1. Let _bindingId_ be StringValue of |BindingIdentifier|.
          1. Let _lhs_ be ? ResolveBinding(_bindingId_, _environment_).
          1. <del>Let _v_ to ? GetV(_value_, _propertyName_).</del>
          1. <ins>Let _v_ be ~empty~.</ins>
          1. <ins>If _propertyName_ is a Private Name, then</ins>
            1. <ins>Set _v_ to ? PrivateGet(_propertyName_, _value_).</ins>
          1. <ins>Else,</ins>
            1. <ins>Set _v_ to ? GetV(_value_, _propertyName_).</ins>
          1. If |Initializer| is present and _v_ is *undefined*, then
            1. If IsAnonymousFunctionDefinition(|Initializer|) is *true*, then
              1. Set _v_ to the result of performing NamedEvaluation for |Initializer| with argument _bindingId_.
            1. Else,
              1. Let _defaultValue_ be the result of evaluating |Initializer|.
              1. Set _v_ to ? GetValue(_defaultValue_).
          1. If _environment_ is *undefined*, return ? PutValue(_lhs_, _v_).
          1. Return InitializeReferencedBinding(_lhs_, _v_).
        </emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>

<emu-clause id="sec-ecmascript-language-functions-and-classes">
  <h1>ECMAScript Language: Functions and Classes</h1>
  <emu-clause id="sec-placeholder"><h1>1</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>2</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>3</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>4</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>5</h1></emu-clause>
  <emu-clause id="sec-placeholder"><h1>6</h1></emu-clause>

  <emu-clause id="sec-class-definitions">
    <h1>Class Definitions</h1>
    <emu-clause id="sec-placeholder"><h1>Static Semantics: Early Errors</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>Static Semantics: ClassElementKind</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>Static Semantics: ConstructorMethod</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>Static Semantics: IsStatic</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>Static Semantics: NonConstructorElements</h1></emu-clause>
    <emu-clause id="sec-placeholder"><h1>Static Semantics: PrototypePropertyNameList</h1></emu-clause>

    <emu-clause id="sec-static-semantics-allprivateidentifiersvalid" type="sdo" aoid="AllPrivateIdentifiersValid">
      <h1>Static Semantics: AllPrivateIdentifiersValid</h1>
      <p>With parameter _names_.</p>

      <ins class="block">
      <emu-grammar>AssignmentProperty : PrivateIdentifier `:` AssignmentElement</emu-grammar>
      <emu-alg>
        1. If _names_ contains the StringValue of |PrivateIdentifier|, then
          1. Return AllPrivateIdentifiersValid of |AssignmentElement| with argument _names_.
        1. Return *false*.
      </emu-alg>
      </ins>

      <ins class="block">
      <emu-grammar>BindingProperty : PrivateIdentifier `:` BindingElement</emu-grammar>
      <emu-alg>
        1. If _names_ contains the StringValue of |PrivateIdentifier|, then
          1. Return AllPrivateIdentifiersValid of |BindingElement| with argument _names_.
        1. Return *false*.
      </emu-alg>
      </ins>
    </emu-clause>
  </emu-clause>
</emu-clause>
